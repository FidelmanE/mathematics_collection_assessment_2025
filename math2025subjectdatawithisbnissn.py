# -*- coding: utf-8 -*-
"""Math2025SubjectDataWithISBNISSN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12YyN6GuAi_qCyVAMDfklHhPMVtLAIWtm
"""

import pandas as pd
from google.colab import drive
drive.mount('/content/drive/')

drive.mount("/content/drive/", force_remount=True)

!ls

import sqlite3
conn = sqlite3.connect("MathSubjects2025.db")
cursor = conn.cursor()
cursor.execute("DROP TABLE IF EXISTS MathSubjects2025")

pip install pymarc

import csv

csv_out = csv.writer(open('/content/drive/My Drive/Data Services/Collections Assessments/Math2025SubjectData/BibswithISBNandISSN.csv', 'w'), delimiter = ',', quotechar = '"', quoting = csv.QUOTE_MINIMAL)

from pymarc import MARCReader, Field, Subfield

with open('/content/drive/My Drive/Data Services/Collections Assessments/CRL/WVU.mrc', 'rb') as fh:
    reader = MARCReader(fh)
    for record in reader:
      csv_record = {}
      try:
        OCN = record['001']
        OCN = str(OCN).replace('=001', '')
        csv_record[OCN] = OCN
        LDR06 = record.leader[6]
        csv_record[LDR06] = LDR06
        LDR07 = record.leader[7]
        csv_record[LDR07] = LDR07
        for field in record.get_fields('008'):
          field008data = field.value()
        field00806 = field008data[6]
        field00807 = field008data[7]
        field00808 = field008data[8]
        field00809 = field008data[9]
        field00810 = field008data[10]
        field00811 = field008data[11]
        field00812 = field008data[12]
        field00813 = field008data[13]
        field00814 = field008data[14]
        field00823 = field008data[23]
        title = (record['245']['a'])
        csv_record[title] = title
        field040d = record['040'].get_subfields('d')
        field040d = str(field040d)
        csv_record[field040d] = field040d
        field020s = record.get_fields('020')
        sISBN = []
        if not field020s:
          sISBN.append(str("No ISBN"))
        else:
          for i in field020s:
            sISBNs = i.get_subfields('a')
            if not sISBNs:
              sISBN.append(str("No ISBN"))
            else:
              for i in sISBNs:
                sISBN.append(str(i))
        field022s = record.get_fields('022')
        ISSN = []
        if not field022s:
          ISSN.append(str("No ISSN"))
        else:
          for i in field022s:
            ISSNs = i.get_subfields('a')
            if not ISSNs:
              ISSN.append(str("No ISSN"))
            else:
              for i in ISSNs:
                ISSN.append(str(i))
        field100s = record.get_fields('100')
        field100a = []
        if not field100s:
          field100a.append(str("No 100a"))
        else:
          for field100 in field100s:
            field100as = field100.get_subfields('a')
            if not field100as:
              field100a.append(str("No 100a"))
            else:
              for i in field100as:
                field100a.append(str(i))
        field110s = record.get_fields('110')
        field110a = []
        if not field110s:
          field110a.append(str("No 110a"))
        else:
          for field110 in field110s:
            field110as = field110.get_subfields('a')
            if not field110as:
              field110a.append(str("No 110a"))
            else:
              for i in field110as:
                field110a.append(str(i))
        field111s = record.get_fields('111')
        field111a = []
        if not field111s:
          field111a.append(str("No 111a"))
        else:
          for field111 in field111s:
            field111as = field111.get_subfields('a')
            if not field111as:
              field111a.append(str("No 111a"))
            else:
              for i in field111as:
                field111a.append(str(i))
        subjects = record.get_fields('650')
        if not subjects:
          subjectlist = []
          subjectlist.append(str("No subjects"))
        else:
          subjectlist = []
          for i in subjects:
            for subfield in i:
              if subfield.code == 'a':
                subjectlist.append(str(subfield.value))
        Field050s = record.get_fields('050')
        field050alist = []
        field050blist = []
        if not Field050s:
          field050alist.append(str("No 050"))
          field050blist.append(str("No 050"))
        else:
          for Field050 in Field050s:
            field050as = Field050.get_subfields('a')
            if not field050as:
              field050alist.append(str("No 050a"))
            else:
              for i in field050as:
                field050alist.append(str(i))
            field050bs = Field050.get_subfields('b')
            if not field050bs:
              field050blist.append(str("No 050b"))
            else:
              for i in field050bs:
                field050blist.append(str(i))
        csv_out.writerow([OCN, LDR06, LDR07, field00806, field00807, field00808, field00809, field00810, field00811, field00812, field00813, field00814, field00823, title, sISBN, ISSN, field100a, field110a, field111a, subjectlist, field050alist, field050blist])
      except KeyError:
            pass

colnames = ['OCN', 'LDR06', 'LDR07', 'field00806', 'field00807', 'field00808', 'field00809', 'field00810', 'field00811', 'field00812', 'field00813', 'field00814', 'field00823', 'title', 'sISBN', 'ISSN', 'field100a', 'field110a', 'field111a', 'subjectlist', 'field050alist', 'field050blist']
Bibs = pd.read_csv('/content/drive/My Drive/Data Services/Collections Assessments/Math2025SubjectData/BibswithISBNandISSN.csv', names=colnames, low_memory=False)
column_headers = list(Bibs.columns.values)
print(column_headers)

Bibs['ISSN'].sample(50)

import csv

csv_out = csv.writer(open('/content/drive/My Drive/Data Services/Collections Assessments/Math2025SubjectData/LHRs.csv', 'w'), delimiter = ',', quotechar = '"', quoting = csv.QUOTE_MINIMAL)

from pymarc import MARCReader, Field, Subfield

with open('/content/drive/My Drive/Data Services/Collections Assessments/CRL/WVU.mrc', 'rb') as fh:
    reader = MARCReader(fh)
    for record in reader:
      csv_record = {}
      try:
        LCN = record['001']
        LCN = str(LCN).replace('=001', '')
        csv_record[LCN] = LCN
        LDR06 = record.leader[6]
        csv_record[LDR06] = LDR06
        LOCN = record['004']
        LOCN = str(LOCN).replace('=004 ', '')
        csv_record[LOCN] = LOCN
        Location = (record['852']['b'])
        if not Location:
          csv_record[Location] = str("No Location")
        else:
          csv_record[Location] = str(Location)
        Field876s = record.get_fields('876')
        Barcodeslist = []
        if not Field876s:
          Barcodeslist.append(str("No Barcodes"))
        else:
          for Field876 in Field876s:
            Barcodes = Field876.get_subfields('p')
            if not Barcodes:
              Barcodeslist.append(str("No Barcodes"))
            else:
              for i in Barcodes:
                Barcodeslist.append(str(i))
        csv_out.writerow([LCN, LDR06, LOCN, Location, Barcodeslist])
      except KeyError:
            pass

colnamesb = ['LCN', 'LDR06', 'LOCN', 'Location', 'Barcodeslist']
LHRs = pd.read_csv('/content/drive/My Drive/Data Services/Collections Assessments/Math2025SubjectData/LHRs.csv', names=colnamesb, low_memory=False)
column_headers = list(LHRs.columns.values)
print(column_headers)

KBART = pd.read_table('/content/drive/My Drive/Data Services/RAPIDElectronic/2025/Mar/Kbart.txt', header=0, delimiter='\t', low_memory=False)

Bibs['OCN'] = Bibs['OCN'].astype(str)
Bibs['OCN'] = Bibs['OCN'].str.replace('ocm','')
Bibs['OCN'] = Bibs['OCN'].str.replace('ocn','')
Bibs['OCN'] = Bibs['OCN'].str.replace('on','')
Bibs['OCN'] = Bibs['OCN'].str.replace('\\','')
Bibs['OCN'] = Bibs['OCN'].str.strip()
Bibs['OCN'] = Bibs['OCN'].str.lstrip('0')

LHRs['LOCN'] = LHRs['LOCN'].astype(str)
LHRs['LOCN'] = LHRs['LOCN'].str.replace('ocm','')
LHRs['LOCN'] = LHRs['LOCN'].str.replace('ocn','')
LHRs['LOCN'] = LHRs['LOCN'].str.replace('on','')
LHRs['LOCN'] = LHRs['LOCN'].str.replace('\\','')
LHRs['LOCN'] = LHRs['LOCN'].str.strip()
LHRs['LOCN'] = LHRs['LOCN'].str.lstrip('0')

KBART['oclc_number'] = KBART['oclc_number'].astype(str)
KBART['oclc_number'] = KBART['oclc_number'].replace(r'\.0$', '', regex=True)
KBART['oclc_number'] = KBART['oclc_number'].str.strip()

Bibs.to_sql('Bibs', conn, if_exists='replace', index=False)

LHRs.to_sql('LHRs', conn, if_exists='replace', index=False)

KBART.to_sql('KBART', conn, if_exists='replace', index=False)

PrintHoldings = pd.read_sql("""SELECT Bibs.[OCN], Bibs.[LDR06], Bibs.[LDR07], Bibs.[title], Bibs.[sISBN], Bibs.[ISSN], Bibs.[field100a], Bibs.[field110a], Bibs.[field111a], Bibs.[field00807], Bibs.[field00808], Bibs.[field00809], Bibs.[field00810], Bibs.[field00811], Bibs.[field00812], Bibs.[field00813], Bibs.[field00814], Bibs.[field00823], Bibs.[subjectlist], Bibs.[field050alist], Bibs.[field050blist], 'Print' AS Format FROM Bibs INNER JOIN LHRs ON Bibs.OCN = LHRs.LOCN""", conn)

PrintHoldings.head(5)

ElectronicHoldings = pd.read_sql("""SELECT Bibs.[OCN], Bibs.[LDR06], Bibs.[LDR07], Bibs.[title], Bibs.[sISBN], Bibs.[ISSN], Bibs.[field100a], Bibs.[field110a], Bibs.[field111a], Bibs.[field00807], Bibs.[field00808], Bibs.[field00809], Bibs.[field00810], Bibs.[field00811], Bibs.[field00812], Bibs.[field00813], Bibs.[field00814], Bibs.[field00823], Bibs.[subjectlist], Bibs.[field050alist], Bibs.[field050blist], 'Electronic' AS Format FROM Bibs LEFT JOIN LHRs ON Bibs.OCN = LHRs.LOCN WHERE LHRs.LOCN Is Null""", conn)

ElectronicHoldings.sample(15)

PrintHoldings.to_sql('PrintHoldings', conn, if_exists='replace', index=False)

ElectronicHoldings.to_sql('ElectronicHoldings', conn, if_exists='replace', index=False)

ElectronicPersonalAuthors = pd.read_sql('SELECT ElectronicHoldings.[OCN], ElectronicHoldings.[LDR06], ElectronicHoldings.[LDR07], ElectronicHoldings.[title], ElectronicHoldings.[sISBN], ElectronicHoldings.[ISSN], ElectronicHoldings.[field100a] As Author, ElectronicHoldings.[field00807], ElectronicHoldings.[field00808], ElectronicHoldings.[field00809], ElectronicHoldings.[field00810], ElectronicHoldings.[field00811], ElectronicHoldings.[field00812], ElectronicHoldings.[field00813], ElectronicHoldings.[field00814], ElectronicHoldings.[field00823], ElectronicHoldings.[subjectlist], ElectronicHoldings.[field050alist], ElectronicHoldings.[field050blist], ElectronicHoldings.[Format], KBART.[oclc_collection_name] FROM ElectronicHoldings LEFT JOIN KBART ON ElectronicHoldings.OCN = KBART.oclc_number WHERE ElectronicHoldings.[field100a] Not Like \'%No 100a%\'', conn)

ElectronicPersonalAuthors.sample(5)

#ElectronicPersonalAuthors['Author'] = ElectronicPersonalAuthors['Author'].replace('No 100a', 'No Author')

ElectronicPersonalAuthors.to_sql('ElectronicPersonalAuthors', conn, if_exists='replace', index=False)

ElectronicCorporateAuthors = pd.read_sql("""SELECT ElectronicHoldings.[OCN], ElectronicHoldings.[LDR06], ElectronicHoldings.[LDR07], ElectronicHoldings.[title], ElectronicHoldings.[sISBN], ElectronicHoldings.[ISSN], ElectronicHoldings.[field110a] As Author, ElectronicHoldings.[field00807], ElectronicHoldings.[field00808], ElectronicHoldings.[field00809], ElectronicHoldings.[field00810], ElectronicHoldings.[field00811], ElectronicHoldings.[field00812], ElectronicHoldings.[field00813], ElectronicHoldings.[field00814], ElectronicHoldings.[field00823], ElectronicHoldings.[subjectlist], ElectronicHoldings.[field050alist], ElectronicHoldings.[field050blist], ElectronicHoldings.[Format], KBART.[oclc_collection_name] FROM ElectronicHoldings LEFT JOIN KBART ON ElectronicHoldings.OCN = KBART.oclc_number WHERE ElectronicHoldings.[field110a] Not Like '%No 110a%'""", conn)

ElectronicCorporateAuthors.sample(5)

ElectronicCorporateAuthors.to_sql('ElectronicCorporateAuthors', conn, if_exists='replace', index=False)

ElectronicConferenceAuthors = pd.read_sql("""SELECT ElectronicHoldings.[OCN], ElectronicHoldings.[LDR06], ElectronicHoldings.[LDR07], ElectronicHoldings.[title], ElectronicHoldings.[sISBN], ElectronicHoldings.[ISSN], ElectronicHoldings.[field111a] As Author, ElectronicHoldings.[field00807], ElectronicHoldings.[field00808], ElectronicHoldings.[field00809], ElectronicHoldings.[field00810], ElectronicHoldings.[field00811], ElectronicHoldings.[field00812], ElectronicHoldings.[field00813], ElectronicHoldings.[field00814], ElectronicHoldings.[field00823], ElectronicHoldings.[subjectlist], ElectronicHoldings.[field050alist], ElectronicHoldings.[field050blist], ElectronicHoldings.[Format], KBART.[oclc_collection_name] FROM ElectronicHoldings LEFT JOIN KBART ON ElectronicHoldings.OCN = KBART.oclc_number WHERE ElectronicHoldings.[field111a] Not Like '%No 111a%'""", conn)

ElectronicConferenceAuthors.sample(5)

ElectronicConferenceAuthors.to_sql('ElectronicConferenceAuthors', conn, if_exists='replace', index=False)

ElectronicNoAuthors = pd.read_sql('SELECT ElectronicHoldings.[OCN], ElectronicHoldings.[LDR06], ElectronicHoldings.[LDR07], ElectronicHoldings.[title], ElectronicHoldings.[sISBN], ElectronicHoldings.[ISSN], \'No Author\' As Author, ElectronicHoldings.[field00807], ElectronicHoldings.[field00808], ElectronicHoldings.[field00809], ElectronicHoldings.[field00810], ElectronicHoldings.[field00811], ElectronicHoldings.[field00812], ElectronicHoldings.[field00813], ElectronicHoldings.[field00814], ElectronicHoldings.[field00823], ElectronicHoldings.[subjectlist], ElectronicHoldings.[field050alist], ElectronicHoldings.[field050blist], ElectronicHoldings.[Format], KBART.[oclc_collection_name] FROM ElectronicHoldings LEFT JOIN KBART ON ElectronicHoldings.OCN = KBART.oclc_number WHERE ElectronicHoldings.[field100a] Like \'%No 100a%\' AND ElectronicHoldings.[field110a] Like \'%No 110a%\' AND ElectronicHoldings.[field111a] Like \'%No 111a%\'', conn)

ElectronicNoAuthors.sample(5)

ElectronicNoAuthors.to_sql('ElectronicNoAuthors', conn, if_exists='replace', index=False)

PrintPersonalAuthors = pd.read_sql("""SELECT PrintHoldings.[OCN], PrintHoldings.[LDR06], PrintHoldings.[LDR07], PrintHoldings.[title], PrintHoldings.[sISBN], PrintHoldings.[ISSN], PrintHoldings.[field100a] As Author, PrintHoldings.[field00807], PrintHoldings.[field00808], PrintHoldings.[field00809], PrintHoldings.[field00810], PrintHoldings.[field00811], PrintHoldings.[field00812], PrintHoldings.[field00813], PrintHoldings.[field00814], PrintHoldings.[field00823], PrintHoldings.[subjectlist], PrintHoldings.[field050alist], PrintHoldings.[field050blist], PrintHoldings.[Format], 'No database' AS [oclc_collection_name] FROM PrintHoldings WHERE PrintHoldings.[field100a] Not Like '%No 100a%'""", conn)

PrintPersonalAuthors.sample(5)

#PrintPersonalAuthors['Author'] = PrintPersonalAuthors['Author'].replace('No 100a', 'No Author')

PrintPersonalAuthors.to_sql('PrintPersonalAuthors', conn, if_exists='replace', index=False)

PrintCorporateAuthors = pd.read_sql("""SELECT PrintHoldings.[OCN], PrintHoldings.[LDR06], PrintHoldings.[LDR07], PrintHoldings.[title], PrintHoldings.[sISBN], PrintHoldings.[ISSN], PrintHoldings.[field110a] As Author, PrintHoldings.[field00807], PrintHoldings.[field00808], PrintHoldings.[field00809], PrintHoldings.[field00810], PrintHoldings.[field00811], PrintHoldings.[field00812], PrintHoldings.[field00813], PrintHoldings.[field00814], PrintHoldings.[field00823], PrintHoldings.[subjectlist], PrintHoldings.[field050alist], PrintHoldings.[field050blist], PrintHoldings.[Format], 'No database' AS [oclc_collection_name] FROM PrintHoldings WHERE PrintHoldings.[field110a] Not Like '%No 110a%'""", conn)

PrintCorporateAuthors.sample(5)

#PrintCorporateAuthors['Author'] = PrintCorporateAuthors['Author'].replace('No 110a', 'No Author')

PrintCorporateAuthors.to_sql('PrintCorporateAuthors', conn, if_exists='replace', index=False)

PrintConferenceAuthors = pd.read_sql("""SELECT PrintHoldings.[OCN], PrintHoldings.[LDR06], PrintHoldings.[LDR07], PrintHoldings.[title], PrintHoldings.[sISBN], PrintHoldings.[ISSN], PrintHoldings.[field111a] As Author, PrintHoldings.[field00807], PrintHoldings.[field00808], PrintHoldings.[field00809], PrintHoldings.[field00810], PrintHoldings.[field00811], PrintHoldings.[field00812], PrintHoldings.[field00813], PrintHoldings.[field00814], PrintHoldings.[field00823], PrintHoldings.[subjectlist], PrintHoldings.[field050alist], PrintHoldings.[field050blist], PrintHoldings.[Format], 'No database' AS [oclc_collection_name] FROM PrintHoldings WHERE PrintHoldings.[field111a] Not Like '%No 111a%'""", conn)

PrintConferenceAuthors.sample(5)

#PrintConferenceAuthors['Author'] = PrintConferenceAuthors['Author'].replace('No 111a', 'No Author')

PrintConferenceAuthors.to_sql('PrintConferenceAuthors', conn, if_exists='replace', index=False)

PrintNoAuthors = pd.read_sql('SELECT PrintHoldings.[OCN], PrintHoldings.[LDR06], PrintHoldings.[LDR07], PrintHoldings.[title], PrintHoldings.[sISBN], PrintHoldings.[ISSN], \'No Author\' As Author, PrintHoldings.[field00807], PrintHoldings.[field00808], PrintHoldings.[field00809], PrintHoldings.[field00810], PrintHoldings.[field00811], PrintHoldings.[field00812], PrintHoldings.[field00813], PrintHoldings.[field00814], PrintHoldings.[field00823], PrintHoldings.[subjectlist], PrintHoldings.[field050alist], PrintHoldings.[field050blist], PrintHoldings.[Format], \'No database\' AS [oclc_collection_name] FROM PrintHoldings WHERE PrintHoldings.[field100a] Like \'%No 100a%\' AND PrintHoldings.[field110a] Like \'%No 110a%\' AND PrintHoldings.[field111a] Like \'%No 111a%\'', conn)

PrintNoAuthors.sample(5)

PrintNoAuthors.to_sql('PrintNoAuthors', conn, if_exists='replace', index=False)

AllHoldingsWithSHs = pd.read_sql("""SELECT DISTINCT([OCN]), [LDR06], [LDR07], [title], [sISBN], [ISSN], [Author], [field00807], [field00808], [field00809], [field00810], [field00811], [field00812], [field00813], [field00814], [field00823], [subjectlist], [field050alist], [field050blist], [Format], [oclc_collection_name] FROM
(SELECT * FROM ElectronicPersonalAuthors
UNION
SELECT * FROM ElectronicCorporateAuthors
UNION
SELECT * FROM ElectronicConferenceAuthors
UNION
SELECT * FROM ElectronicNoAuthors
UNION
SELECT * FROM PrintPersonalAuthors
UNION
SELECT * FROM PrintCorporateAuthors
UNION
SELECT * FROM PrintConferenceAuthors
UNION
SELECT * FROM PrintNoAuthors)
WHERE [subjectlist] Like '%mathematic%' OR [subjectlist] Like '%algebra%' OR [subjectlist] Like '%probabili%' OR [subjectlist] Like '%statistic%' OR [subjectlist] Like '%numerical analysis%' OR [subjectlist] Like '%geometr%' OR [subjectlist] Like '%analytic mechanics%'""", conn)

AllHoldingsWithSHs['Date1'] = AllHoldingsWithSHs['field00807'] + AllHoldingsWithSHs['field00808'] + AllHoldingsWithSHs['field00809'] + AllHoldingsWithSHs['field00810']

AllHoldingsWithSHs['Date2'] = AllHoldingsWithSHs['field00811'] + AllHoldingsWithSHs['field00812'] + AllHoldingsWithSHs['field00813'] + AllHoldingsWithSHs['field00814']

AllHoldingsWithSHs.to_sql('AllHoldingsWithSHs', conn, if_exists='replace', index=False)

AllHoldingsWithSHs.head(24)

#EBooksByDatabase = pd.read_sql("""SELECT [OCN], [title], [Author], [Date1], [oclc_collection_name] FROM AllHoldingsWithSHs WHERE [Format] Like '%Electronic%' AND [LDR07] Like 'm'""", conn)

#len(EBooksByDatabase)

#EBooksByDatabase.to_excel('/content/drive/My Drive/Data Services/Collections Assessments/Math2025SubjectData/EBooksByDatabase.xlsx')

AllHoldingsWithSHs = AllHoldingsWithSHs.groupby(['OCN', 'title'], dropna=True).agg(
    {
        col: 'first' if col != 'oclc_collection_name' else lambda x: ', '.join(str(i) for i in x if pd.notna(i))
        for col in AllHoldingsWithSHs.columns if col not in ['OCN', 'title']
    }
)
AllHoldingsWithSHs = AllHoldingsWithSHs.reset_index()

len(AllHoldingsWithSHs)

AllHoldingsWithSHs.head(20)

AllHoldingsWithSHs.to_excel('/content/drive/My Drive/Data Services/Collections Assessments/Math2025SubjectData/AllHoldingsWithSHswithISSNandISBN.xlsx')